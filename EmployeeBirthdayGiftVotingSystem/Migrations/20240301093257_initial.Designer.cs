// <auto-generated />
using System;
using EmployeeBirthdayGiftVotingSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EmployeeBirthdayGiftVotingSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240301093257_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmployeeBirthdayGiftVotingSystem.Data.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8018e901-3aa6-4345-8675-fadbb6852c7b"),
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1998, 12, 31, 22, 0, 0, 0, DateTimeKind.Utc),
                            ConcurrencyStamp = "01d02111-be7d-4400-bf39-295268c0c230",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedUserName = "THEREALJOHN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGGOLaIPLroGe/xNnfc3puOCe5qVrdBIArG3ByHTdIkwgXPhFePn+KCDtp+AMn6WDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fe3ce740-6429-43e7-9e24-c00907285858",
                            TwoFactorEnabled = false,
                            UserName = "therealjohn"
                        },
                        new
                        {
                            Id = new Guid("6dc922b1-3987-4a34-83ec-c8b27a718fbb"),
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1999, 1, 1, 22, 0, 0, 0, DateTimeKind.Utc),
                            ConcurrencyStamp = "026c0896-b559-48dd-851f-327380877eb3",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedUserName = "THEREALJANE",
                            PasswordHash = "AQAAAAIAAYagAAAAEEeRRWC43PikLwtAZjGg+yDAV/rTTG2c46YexTmDHQNXI8xnvsmpPuCJSEW4DD2HEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "12490346-a2e1-4a60-9d0f-e3dd4b2a0fb5",
                            TwoFactorEnabled = false,
                            UserName = "therealjane"
                        },
                        new
                        {
                            Id = new Guid("29506ae4-eccc-47d8-94ed-ec6ffc8023c5"),
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1990, 4, 4, 21, 0, 0, 0, DateTimeKind.Utc),
                            ConcurrencyStamp = "d093c9a4-28bf-4721-9b82-f7d1feba7c06",
                            EmailConfirmed = false,
                            FirstName = "Henry",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedUserName = "ALAKAZAM",
                            PasswordHash = "AQAAAAIAAYagAAAAENvzsDn4iLCTOJmrU41Matn5I5EZYusqu78LLYZFpTR5WMJqSZaVxUoUpZn5QrQakw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "229f7ec6-a5bb-4630-8339-dde015920848",
                            TwoFactorEnabled = false,
                            UserName = "Alakazam"
                        },
                        new
                        {
                            Id = new Guid("1976a0d1-d843-4c6a-a746-1d909178d1de"),
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1984, 7, 6, 21, 0, 0, 0, DateTimeKind.Utc),
                            ConcurrencyStamp = "aead823b-04e3-48e5-ac90-542e21413138",
                            EmailConfirmed = false,
                            FirstName = "Lee",
                            LastName = "Everett",
                            LockoutEnabled = false,
                            NormalizedUserName = "LEE",
                            PasswordHash = "AQAAAAIAAYagAAAAEDymtVdGi3iSd1UNH+lGHO5aDSwWYX0KcrJAtUPVhy01Hu+LW1+jU7jaKa6ZBL4aGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83d9f9b9-aa23-43b3-a755-78650e128929",
                            TwoFactorEnabled = false,
                            UserName = "lee"
                        },
                        new
                        {
                            Id = new Guid("4e592c87-0e1f-4b64-97f2-31aa0444705d"),
                            AccessFailedCount = 0,
                            Birthday = new DateTime(2002, 6, 3, 21, 0, 0, 0, DateTimeKind.Utc),
                            ConcurrencyStamp = "fa544b8c-3c47-4f30-8a0e-724a0712e743",
                            EmailConfirmed = false,
                            FirstName = "Ryota",
                            LastName = "Mitarai",
                            LockoutEnabled = false,
                            NormalizedUserName = "RYOTA1",
                            PasswordHash = "AQAAAAIAAYagAAAAEKbduC/MdT1fRBYL3pHDu4uC+x1uxR7Y67NkX/6rvSbqks8B6y9gKYArX+jflpn9gA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "375e952e-67a1-4ea1-a5a2-4ed5f79da8c4",
                            TwoFactorEnabled = false,
                            UserName = "ryota1"
                        },
                        new
                        {
                            Id = new Guid("a6795017-baf4-477f-b289-fbf01e755dd8"),
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1981, 9, 26, 21, 0, 0, 0, DateTimeKind.Utc),
                            ConcurrencyStamp = "b5a6fc2d-adc6-4632-b004-cc72a7f548a2",
                            EmailConfirmed = false,
                            FirstName = "Joel",
                            LastName = "Miller",
                            LockoutEnabled = false,
                            NormalizedUserName = "TEXAS",
                            PasswordHash = "AQAAAAIAAYagAAAAEPE7NNKXRlZswib1tDl46FtPCH3KVS+bgY8vJhihNQuQTbLAA6GuOQ4JHBZnQeRoNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74b72bf3-6f9f-46bb-bddc-b227bdbeb1e4",
                            TwoFactorEnabled = false,
                            UserName = "texas"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("EmployeeBirthdayGiftVotingSystem.Data.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("EmployeeBirthdayGiftVotingSystem.Data.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeBirthdayGiftVotingSystem.Data.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("EmployeeBirthdayGiftVotingSystem.Data.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
